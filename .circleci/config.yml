#Alfredo Moreira
#Put this file in a .circleci/ folder
#This file is to be used to run Github Status Checks
version: 2.1
parameters:
  register_migration:
    default: false
    type: boolean
  run_branch_pipeline:
    default: true
    type: boolean
  run_migration_prod:
    default: false
    type: boolean
  run_migration_stage:
    default: false
    type: boolean
  run_rollback_prod:
    default: false
    type: boolean
  run_rollback_stage:
    default: false
    type: boolean
  files:
    default: ""
    type: string
  date_pattern:
    default: ""
    type: string
orbs:
  node: circleci/node@3.0.0
  codecov: codecov/codecov@1.1.3
  sonarcloud: sonarsource/sonarcloud@1.0.3
jobs: 
  build:
    docker:
      - image: cimg/node:16.12.0
    working_directory: ~/inreach-api
    steps:
      - checkout
      - run: 
          name: Check Node Version
          command: node --version
      - run:
          name: Install Packages
          command: yarn install
      - save_cache:
         paths:
          - node_modules
          - "~/.cache/Cypress"
         key: v1-dependencies-{{ checksum "package.json" }}
      #Recreate .env file from CircleCI Project Env Vars
      - run:
          name: Create .env file
          command: |
           cat \<< EOF > ./.env
           MAILGUN_API_KEY=$MAILGUN_API_KEY
           MAILGUN_DOMAIN=$MAILGUN_DOMAIN
           DB_URI=$DB_URI
           SHEETS_API_KEY=$SHEETS_API_KEY
           EOF

      #Building and Compiling Binary
      - run: 
          name: Compile Binary
          command: yarn build

  unit:
    docker:
      - image: cimg/node:16.12.0
    working_directory: ~/inreach-api
    steps:
      - checkout
      - run: 
          name: Check Node Version
          command: node --version
      - run:
          name: Install Packages
          command: yarn install
      - run:
          name: Install Cypress
          command: yarn add cypress
      #save cache for use next tests
      - save_cache:
         paths:
          - node_modules
          - "~/.cache/Cypress"
         key: v1-dependencies-{{ checksum "package.json" }}
      #Unit Testing
      - run: 
          name: "Unit Testing"
          command: "yarn pre-unit-test && yarn unit-test" 
      - codecov/upload:
          file: 'jestCoverage/coverage-final.json'
          flags: 'Unit-Tests'
      - store_test_results:
          path: ./jestUnitTest
      - store_artifacts:
          path: ./jestCoverage
          destination: Unit
    
  e2e:
    docker:
      - image: cypress/base:16.5.0
        environment:
          ## this enables colors in the output
          TERM: xterm
      ## MongoDB 
      - image: mongo:4.4.10
        environment:
          MONGO_INITDB_ROOT_USERNAME: user
          MONGO_INITDB_ROOT_PASSWORD: password
          MONGO_INITDB_DATABASE: asylum-connect
    working_directory: ~/inreach-api
    steps:
      - checkout
      - run: 
          name: Check Node Version
          command: node --version
    # Fix to ignore as Cypress:base does not have node version 15.x
      - run:
          name: Ignore Engines
          command: yarn config set ignore-engines true
      - run:
          name: Install Packages
          command: yarn install
      - run:
          name: Install NYC
          command: yarn add nyc
      - run:
          name: Install Cypress
          command: yarn add cypress@9.7.0
      #save cache for use next tests
      - save_cache:
         paths:
          - node_modules
          - "~/.cache/Cypress"
         key: v1-dependencies-{{ checksum "package.json" }}
      #Recreate .env file from CircleCI Project Env Vars
      - run:
          name: Create .env file
          command: |
           cat \<< EOF > ./.env
           MAILGUN_API_KEY=$MAILGUN_API_KEY
           MAILGUN_DOMAIN=$MAILGUN_DOMAIN
           DB_URI=$DB_URI_STAGING
           ENV=TEST
           SHEETS_API_KEY=$SHEETS_API_KEY
           TEST_DB_URI=$TEST_DB_URI
           EOF
      #Seed Docker DB
      - run:
          name: "Seed Docker DB"
          command: yarn seed-docker-db
      #Testing
      - run: 
          name: "E2E Automation"
          command: "yarn pre-e2e-test && yarn e2e"
      - run:
          name: "Show Coverage"
          command: "yarn show-coverage"
      - run:
          name: "Generate Report"
          command: "yarn report:combined"
      - codecov/upload:
          file: 'coverageReports/coverage-final.json'
          flags: 'Integration'
      - sonarcloud/scan
      - run:
          name: "Post E2E tasks"
          command: "yarn post-e2e-test"

  lint:
    docker:
      - image: cimg/node:16.12.0
    working_directory: ~/inreach-api
    steps:
      - checkout
      - run: 
          name: Check Node Version
          command: node --version
      - run:
          name: Install Packages
          command: yarn install
      #save cache for use next tests
      - save_cache:
         paths:
          - node_modules
          - "~/.cache/Cypress"
         key: v1-dependencies-{{ checksum "package.json" }}
      #Run linting
      - run:
          name: Run linting
          command: "yarn lint"
  
  register_migration_stage:
    docker:
      docker:
      - image: cimg/node:16.12.0
    working_directory: ~/inreach-api
    environment:
      PIPELINE_ID: << pipeline.parameters.pipelineid >>
      TYPE: migration_stage
    steps:
      - checkout
      #Recreate .env file from CircleCI Project Env Vars
      - run:
          name: Create .env file
          command: |
           cat \<< EOF > ./.env
           DB_URI=$DB_URI_STAGING
           PROFILE=CI
           EOF
      - run:
          name: Install Packages
          command: yarn install
      - run: 
          name: Register Migration Stage
          command: |
            for i in ${FILES//,/ }; do
              export MIGRATION_FILE=$i
              yarn register-migration
            done

  register_migration_prod:
    docker:
      docker:
      - image: cimg/node:16.12.0
    working_directory: ~/inreach-api
    environment:
      PIPELINE_ID: << pipeline.parameters.pipelineid >>
      TYPE: migration_prod
    steps:
      - checkout
      #Recreate .env file from CircleCI Project Env Vars
      - run:
          name: Create .env file
          command: |
           cat \<< EOF > ./.env
           DB_URI=$DB_URI_PROD
           PROFILE=CI
           EOF
      - run:
          name: Install Packages
          command: yarn install
      - run: 
          name: Register Migration Prof
          command: |
            export  FILES=$(find . -type f -iname "*$DATE_PATTERN*" | cut -c 13-)
              export MIGRATION_FILE=$i
              yarn register-migration
            done


  migration_prod:
    docker:
      - image: cimg/node:16.12.0
    working_directory: ~/inreach-api
    environment:
      DATE_PATTERN: << pipeline.parameters.date_pattern>>
      PIPELINE_ID: << pipeline.id >>
      TYPE: migration_prod
    steps:
      - checkout
      #Recreate .env file from CircleCI Project Env Vars
      - run:
          name: Create .env file
          command: |
           cat \<< EOF > ./.env
           DB_URI=$DB_URI_PROD
           PROFILE=CI
           EOF
      - run:
          name: Install Packages
          command: yarn install
      - run: 
          name: Run migration
          command: |
            export  FILES=$(find . -type f -iname "*$DATE_PATTERN*" | cut -c 13-)
            for i in ${FILES//,/ }; do
              export MIGRATION_FILE=$i
              yarn run-migration
            done
      - run:  
          name: Register migration
          command: |
             curl --request POST \
              --url https://circleci.com/api/v2/project/gh/asylum-connect/inreach-api/pipeline \
              --header "Circle-Token: $TOKEN" \
              --header 'content-type: application/json' \
              --data '{"branch":"main",
                 "parameters":{"register_migration": true,
                 "pipelineid":"$PIPELINE_ID",
	               "run_branch_pipeline":false}'
  
  migration_stage:
    docker:
      - image: cimg/node:16.12.0
    working_directory: ~/inreach-api
    environment:
      FILES: << pipeline.parameters.files >>
      PIPELINE_ID: << pipeline.id >>
      TYPE: migration_stage
    steps:
      - checkout
      #Recreate .env file from CircleCI Project Env Vars
      - run:
          name: Create .env file
          command: |
           cat \<< EOF > ./.env
           DB_URI=$DB_URI_STAGING
           PROFILE=CI
           EOF
      - run:
          name: Install Packages
          command: yarn install
      - run: 
          name: Run migration
          #Find all files matching regex
          command: |
            for i in ${FILES//,/ }; do
              export MIGRATION_FILE=$i
              yarn run-migration
            done
      - run:  
          name: Register migration
          command: |
             curl --request POST \
              --url https://circleci.com/api/v2/project/gh/asylum-connect/inreach-api/pipeline \
              --header "Circle-Token: $TOKEN" \
              --header 'content-type: application/json' \
              --data '{"branch":"dev",
                 "parameters":{"register_migration": true,
                 "pipelineid":"$PIPELINE_ID",
	               "run_branch_pipeline":false}'
  
  rollback_prod:
    docker:
      - image: cimg/node:16.12.0
    working_directory: ~/inreach-api
    environment:
      DATE_PATTERN: << pipeline.parameters.date_pattern >>
      PIPELINE_ID: << pipeline.id >>
      TYPE: rollback_prod
    steps:
      - checkout
      #Recreate .env file from CircleCI Project Env Vars
      - run:
          name: Create .env file
          command: |
           cat \<< EOF > ./.env
           DB_URI=$DB_URI_PROD
           PROFILE=CI
           EOF
      - run:
          name: Install Packages
          command: yarn install
      - run: 
          name: Run rollback
          command: |
            export  FILES=$(find . -type f -iname "*$DATE_PATTERN*" | cut -c 13-)
            for i in ${FILES//,/ }; do
              export MIGRATION_FILE=$i
              yarn run-rollback
            done
      - run:  
          name: Register migration
          command: |
             curl --request POST \
              --url https://circleci.com/api/v2/project/gh/asylum-connect/inreach-api/pipeline \
              --header "Circle-Token: $TOKEN" \
              --header 'content-type: application/json' \
              --data '{"branch":"main",
                 "parameters":{"register_migration": true,
                 "pipelineid":"$PIPELINE_ID",
	               "run_branch_pipeline":false}'

  rollback_stage:
    docker:
      - image: cimg/node:16.12.0
    working_directory: ~/inreach-api
    environment:
      FILES: << pipeline.parameters.date_pattern >>
      PIPELINE_ID: << pipeline.id >>
      TYPE: rollback_stage
    steps:
      - checkout
      #Recreate .env file from CircleCI Project Env Vars
      - run:
          name: Create .env file
          command: |
           cat \<< EOF > ./.env
           DB_URI=$DB_URI_STAGING
           PROFILE=CI
           EOF
      - run:
          name: Install Packages
          command: yarn install
      - run: 
          name: Run rollback
          command: |
            for i in ${FILES//,/ }; do
              export MIGRATION_FILE=$i
              yarn run-rollback
            done
      - run:  
          name: Register migration
          command: |
             curl --request POST \
              --url https://circleci.com/api/v2/project/gh/asylum-connect/inreach-api/pipeline \
              --header "Circle-Token: $TOKEN" \
              --header 'content-type: application/json' \
              --data '{"branch":"dev",
                 "parameters":{"register_migration": true,
                 "pipelineid":"$PIPELINE_ID",
	               "run_branch_pipeline":false}'

workflows:
  version: 2
  development:
    when: << pipeline.parameters.run_branch_pipeline >>
    jobs:
      - build:
          filters:
            branches:
              only: dev
      - e2e:
         context: SonarCloud
         filters:
            branches:
              only: dev
  pull_request:
    jobs:
      - build:
          filters:
            branches:
              ignore: [main, dev]
      - e2e:
         context: SonarCloud
         filters:
            branches:
              ignore: [main, dev]
      - unit:
          filters:
            branches:
              ignore: [main, dev]
      - lint:
          filters:
            branches:
              ignore: [main, dev]
  
  register_migration_stage:
    when: << pipeline.parameters.register_migration >>
    jobs:
      - register_migration_stage:
          filters:
            branches:
              only: dev
  
  register_migration_prod:
    when: << pipeline.parameters.register_migration >>
    jobs:
      - register_migration_prod:
          filters:
            branches:
              only: main
              
  migration_prod:
    when: << pipeline.parameters.run_migration_prod >>
    jobs:
      - hold:
          type: approval
      - migration_prod:
          filters:
            branches:
              only: main
          requires:
            - hold
  
  migration_stage:
    when: << pipeline.parameters.run_migration_stage >>
    jobs:
      - migration_stage:
          filters:
            branches:
             only: dev 
  
  rollback_prod:
    when: << pipeline.parameters.run_rollback_prod >>
    jobs:
      - hold:
          type: approval
      - rollback_prod:
          filters:
            branches:
              only: main
          requires:
            - hold
  
  rollback_stage:
    when: << pipeline.parameters.run_rollback_stage >>
    jobs:
      - rollback_stage:
          filters:
            branches:
              only: dev